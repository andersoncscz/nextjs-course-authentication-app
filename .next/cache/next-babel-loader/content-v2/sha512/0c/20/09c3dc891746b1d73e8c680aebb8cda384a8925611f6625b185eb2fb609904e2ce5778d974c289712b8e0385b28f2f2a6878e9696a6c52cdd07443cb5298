{"ast":null,"code":"import { hashPassword } from '../../../lib/auth';\nimport { connectToDatabase } from '../../../lib/db';\n\nasync function handler(req, res) {\n  if (req.method !== 'POST') {\n    return;\n  }\n\n  const data = req.body;\n  const {\n    email,\n    password\n  } = data;\n\n  if (!email || !email.includes('@') || !password || password.trim().length < 7) {\n    res.status(422).json({\n      message: 'Invalid input - password should also be at least 7 characters long.'\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n  const db = client.db();\n  const existingUser = await db.collection('users').findOne({\n    email: email\n  });\n\n  if (existingUser) {\n    res.status(422).json({\n      message: 'User exists already!'\n    });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n  const result = await db.collection('users').insertOne({\n    email: email,\n    password: hashedPassword\n  });\n  res.status(201).json({\n    message: 'Created user!'\n  });\n  client.close();\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/andersondossantoscruz/Desktop/Courses/nextjs-course-authentication-app/pages/api/auth/signup.js"],"names":["hashPassword","connectToDatabase","handler","req","res","method","data","body","email","password","includes","trim","length","status","json","message","client","db","existingUser","collection","findOne","close","hashedPassword","result","insertOne"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC/B,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB;AACD;;AAED,QAAMC,IAAI,GAAGH,GAAG,CAACI,IAAjB;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,IAA5B;;AAEA,MACE,CAACE,KAAD,IACA,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CADD,IAEA,CAACD,QAFD,IAGAA,QAAQ,CAACE,IAAT,GAAgBC,MAAhB,GAAyB,CAJ3B,EAKE;AACAR,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,MAAAA,OAAO,EACL;AAFiB,KAArB;AAIA;AACD;;AAED,QAAMC,MAAM,GAAG,MAAMf,iBAAiB,EAAtC;AAEA,QAAMgB,EAAE,GAAGD,MAAM,CAACC,EAAP,EAAX;AAEA,QAAMC,YAAY,GAAG,MAAMD,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B;AAAEZ,IAAAA,KAAK,EAAEA;AAAT,GAA/B,CAA3B;;AAEA,MAAIU,YAAJ,EAAkB;AAChBd,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACAC,IAAAA,MAAM,CAACK,KAAP;AACA;AACD;;AAED,QAAMC,cAAc,GAAG,MAAMtB,YAAY,CAACS,QAAD,CAAzC;AAEA,QAAMc,MAAM,GAAG,MAAMN,EAAE,CAACE,UAAH,CAAc,OAAd,EAAuBK,SAAvB,CAAiC;AACpDhB,IAAAA,KAAK,EAAEA,KAD6C;AAEpDC,IAAAA,QAAQ,EAAEa;AAF0C,GAAjC,CAArB;AAKAlB,EAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AACAC,EAAAA,MAAM,CAACK,KAAP;AACD;;AAED,eAAenB,OAAf","sourcesContent":["import { hashPassword } from '../../../lib/auth';\nimport { connectToDatabase } from '../../../lib/db';\n\nasync function handler(req, res) {\n  if (req.method !== 'POST') {\n    return;\n  }\n\n  const data = req.body;\n\n  const { email, password } = data;\n\n  if (\n    !email ||\n    !email.includes('@') ||\n    !password ||\n    password.trim().length < 7\n  ) {\n    res.status(422).json({\n      message:\n        'Invalid input - password should also be at least 7 characters long.',\n    });\n    return;\n  }\n\n  const client = await connectToDatabase();\n\n  const db = client.db();\n\n  const existingUser = await db.collection('users').findOne({ email: email });\n\n  if (existingUser) {\n    res.status(422).json({ message: 'User exists already!' });\n    client.close();\n    return;\n  }\n\n  const hashedPassword = await hashPassword(password);\n\n  const result = await db.collection('users').insertOne({\n    email: email,\n    password: hashedPassword,\n  });\n\n  res.status(201).json({ message: 'Created user!' });\n  client.close();\n}\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}